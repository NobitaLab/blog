---
description: workflow开发指南
globs: *
alwaysApply: true
---
# 📋 workflow 开发规则指南

## 🎯 开发流程规范 - 场景识别与最佳实践

**重要：为确保开发质量，AI 需要在开始工作前完成以下步骤：**
### 0. 必须遵守
- **必须使用中文回复**
- **本项目后端使用GOPATH模式，任何时候都不可以按照go mod模式修改代码或编译**
- **每次修改好代码后，需要进行编译运行时，暂停并给出操作步骤，由用户完成编译和运行验证**
### 1. 场景识别
首先需要识别当前的开发场景类型：
- **Web 项目**：React/Vue/原生 JS 等前端项目
- **微信小程序**：小程序云开发项目  
- **云托管项目**：CloudBase Run 后端服务项目（支持 Java/Go/Python/Node.js/PHP/.NET 等任意语言，适合 WebSocket 长连接、长耗时任务、需要连接数据库/消息队列等场景）
- **数据库相关**：涉及数据操作的项目
- **UI 设计**：需要界面设计的项目
- **嵌入式功能模块开发** → 额外读：`rules/C编码规范.mdc`

### 2. 规则文件选择
根据识别的场景，需要参考对应的专业规则文件：

**📋 场景规则映射表（必须遵守）：**
- **Web 项目** → 必读：`rules/web-development.mdc` + `rules/cloudbase-platform.mdc`
- **微信小程序** → 必读：`rules/miniprogram-development.mdc` + `rules/cloudbase-platform.mdc`
- **云托管项目** → 必读：`rules/cloudrun-development.mdc` + `rules/cloudbase-platform.mdc`
- **数据库操作** → 额外读：`rules/database.mdc`
- **UI 设计** → 额外读：`rules/ui-design.mdc`

### 3. 开发确认
在开始工作前建议向用户确认：
1. "我识别这是一个 [场景类型] 项目"
2. "我将严格遵循以下规则文件：[具体文件列表]"
3. "请确认我的理解是否正确"

## 核心行为规则
1. **工具优先**：关于腾讯云开发的操作，必须优先使用 cloudbase 的 MCP 工具
2. **项目理解**：首先阅读当前项目的 README.md，遵照项目说明开发
3. **目录规范**：在当前目录下产出项目代码之前，先检查当前目录文件
4. **部署顺序**：有后端依赖时，优先部署后端再预览前端
5. **交互确认**：需求不明确时使用 interactiveDialog 澄清，执行高风险操作前必须确认
6. **实时通信**：使用云开发的实时数据库 watch 能力
7. **认证规则**：当用户开发项目的时候，如果用到用户登录认证，需要用到内置的认证功能，必须严格区分平台的认证方式
   - **Web 项目**：必须使用 CloudBase Web SDK 内置认证（如 `auth.toDefaultLoginPage()`）
   - **小程序项目**：天然免登录，云函数中获取 `wxContext.OPENID`
8. **文档同步更新**：每次代码修改完成后，必须同步更新 `specs/` 目录下的相关文档，确保文档与代码实现保持一致

## 工作流

你会根据用户的需求智能判断使用哪种模式来开发，默认情况下采用 spec 来开发

**智能判断标准：**
- **使用 spec**：新功能开发、复杂架构设计、多模块集成、涉及数据库/UI设计
- **跳过 spec**：简单修复、文档更新、配置修改、代码重构

### Workflow 命令控制

用户也可以通过指令来要求

**可用命令：**
- **/spec** - 强制使用完整 spec 流程
- **/no_spec** - 跳过 spec 流程，直接执行
- **/help** - 显示命令帮助


以下是 spec 工作流：
<spec_workflow>
0. 请注意！必须遵守以下的规则，每个环节完成后都需要由我进行确认后才可进行下一个环节；
1. 如果你判断我的输入提出的是一个新需求，可以按照下面的标准软件工程的方式独立开展工作, 必要时向我确认并了解需求细节
2. 每当我输入新的需求的时候，为了规范需求质量和验收标准，必须首先会搞清楚问题和需求，必须跟我确认之后，然后再进入下一阶段
3. 需求文档和验收标准设计：首先完成需求的设计,按照 EARS 简易需求语法方法来描述,如果你判断需求涉及到前端页面，需要在需求中提前确定好设计风格和配色，必须跟我进行确认需求细节，最终确认清楚后，需求定稿，然后再进入下一阶段，保存在 `specs/requirements.md` 中，跟我确认清楚后，才继续进入下一个阶段，参考格式如下

```markdown
# 需求文档

## 介绍

需求描述

## 需求

### 需求 1 - 需求名称

**用户故事：** 用户故事内容

#### 验收标准

1. 采用 ERAS 描述的子句 While <可选前置条件>, when <可选触发器>, the <系统名称> shall <系统响应>，例如 When 选择"静音"时，笔记本电脑应当抑制所有音频输出。
2. ...
...
```
1. 技术方案设计： 在完成需求的设计之后，你会根据当前的技术架构和前面确认好的需求，进行需求的技术方案设计，精简但是能够准确的描述技术的架构（例如架构、技术栈、技术选型、数据库/接口设计、测试策略、安全性），必要时可以用 mermaid 来绘图，保存在  `specs/design.md`  中，必须跟我确认清楚后，然后再进入下一阶段
2. 任务拆分：在完成技术方案设计后，你会根据需求文档和技术方案，细化具体要做的事情，必须跟我确认清楚后，，保存在`specs/tasks.md` 中, 跟我确认清楚后，然后再进入下一阶段，开始正式执行任务，同时需要及时更新任务的状态，执行的时候尽可能独立自主运行，保证效率和质量

任务参考格式如下

``` markdown
# 实施计划

- [ ] 1. 任务信息
  - 具体要做的事情
  - ...
  - _需求: 相关的需求点的编号

```
</spec_workflow>

## 🔄 开发工作流程

## 开发


### 文档生成规则

1. 你会在生成项目后生成一个 README.md 文件，里面包含项目的基本信息，例如项目名称、项目描述, 最关键的是要把项目的架构和涉及到的云开发资源说清楚，让维护者可以参考来进行修改和维护

2. **文档同步更新机制**：每次代码修改完成后，必须同步更新 `specs/` 目录下的相关文档，确保文档与代码实现保持一致。具体包括：
   - **需求文档更新**：当功能需求发生变化时，更新 `specs/requirements.md`
   - **技术方案更新**：当架构或技术选型调整时，更新 `specs/design.md`
   - **任务状态更新**：当开发任务完成或变更时，更新 `specs/tasks.md` 中的任务状态
   - **版本记录**：在相关文档中记录变更日志和版本信息
   - **一致性检查**：确保文档描述与实际代码实现完全匹配

## ⚡ 开发质量检查清单

为确保开发质量，建议在开始任务前完成以下检查：

### ⚠️ 常见问题避免
- 避免跳过场景识别直接开始开发
- 避免spec工作流中每个环节完成后未经用户确认后直接进行到下一个环节
- 避免混用不同平台的 API 和认证方式  
- 避免忽略专业规则文件的指导
- 重要技术方案建议与用户确认
- **避免代码修改后忘记更新相关文档**：每次代码变更后必须同步更新 specs/ 目录下的文档

### 🔄 质量保障
如发现开发不符合规范，可以：
- 指出具体问题点
- 要求重新执行规则检查流程
- 明确指定需要遵循的规则文件
### 🔄 质量保障
如发现开发不符合规范，可以：
- 指出具体问题点
- 要求重新执行规则检查流程
- 明确指定需要遵循的规则文件